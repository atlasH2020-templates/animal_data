openapi: 3.0.3
info:
  title: ATLAS Service Template - Animal data
  description: Setup and synchronize the animals of a farm and their organization in groups and pens.
  version: 0.2.0
externalDocs:
  description: Service Template Document
  url: "https://htmlpreview.github.io/?https://github.com/atlasH2020-templates/animal_data/blob/v0.1.1/doc.html"
tags:
  - name: Barn Information
  - name: Animal Information
  - name: Subscriptions
security:
  - bearerAuth: []
paths:
  /barns:
    get:
      summary: List all barns
      tags:
        - Barn Information
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Barn'
  /barns/{urn}:
    get:
      summary: Get a single barn
      tags:
        - Barn Information
      parameters:
        - name: urn
          in: path
          description: urn of the Barn
          required: true
          schema:
            $ref: '#/components/schemas/URN'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Barn'

  /pens:
    get:
      summary: List all pens
      tags:
        - Barn Information
      parameters:
        - name: barn_urn
          in: query
          description: return only pens in that barn
          schema: 
            $ref: '#/components/schemas/URN'
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pen'
  /pens/{urn}:
    get:
      summary: Get a single pen
      tags:
        - Barn Information
      parameters:
        - name: urn
          in: path
          description: urn of the Pen
          required: true
          schema:
            $ref: '#/components/schemas/URN'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pen'

  /animals:
    get:
      summary: List all animals
      tags:
        - Animal Information
      parameters:
        - name: date
          in: query
          description: Get data for the given date. Default is NOW.
          schema: 
            type: string
            format: date-time
            example: '2022-02-02T12:22:00Z'
        - name: pen_urn
          in: query
          description: Return all animals in the given pen
          schema:
            $ref: '#/components/schemas/URN'
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'

  /animals/{urn}:
    get:
      summary: Get single animal
      tags:
        - Animal Information
      parameters:
        - name: urn
          in: path
          description: urn of the Animal
          required: true
          schema:
            $ref: '#/components/schemas/URN'
        - name: date
          in: query
          description: Get data for the given date. Default is NOW.
          schema: 
            type: string
            format: date-time
            example: '2022-02-02T12:22:00Z'
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'

  /events:
    get:
      summary: Get events for the animals
      tags:
        - Animal Information
      parameters:
        - name: date_start
          in: query
          required: true
          description: Filter only events after that date. ISO8601
          schema: 
            type: string
            format: date-time
            example: "2023-01-01T00:00:00"
        - name: date_end
          in: query
          description: Filter events before this date. Default is NOW. ISO8601
          schema: 
            type: string
            format: date-time
            example: "2023-01-20T13:37:00"
        - name: animal_urn
          in: query
          description: Filter events assigned to that animal
          schema: 
            $ref: '#/components/schemas/URN'
        - name: category
          in: query
          description: Filter events in a special event-category
          schema: 
            $ref: '#/components/schemas/EventCategory'
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /weights:
    get:
      tags:
        - Animal Information
      summary: Get weights for a specific date
      parameters:
        - name: date
          in: query
          description: Filter weighings on this date. ISO8601
          required: true
          schema: 
            type: string
            format: date
            example: "2023-01-20"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalWeight'
      
      
  /subscriptions:
    post:
      security:
        - bearerAuth: []
      tags:
        - Subscriptions
      summary: Registers a notification URL
      description: Registers a notification URL that will be invoked whenever changes occurs in animals (subscribe).
      operationId: subscribe
      requestBody:
        description: subscription parameters
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_url:
                  type: string
                  format: uri
                  description: A subscription's notification_url is invoked with a POST (WITHOUT Authorization headers), containing a Notification request body (see schema below)
                notification_authorization:
                  type: string
                  description: authorization string which will be included in every notification POST
              required:
                - notification_url
              example:
                notification_url: "https://acme.com/my_notification_handler"
      responses:
        '201':
          description: subscription created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: the service-generated id for the new subscription
                  expiration_date:
                    type: string
                    format: date-time
                    description: date at which the subscription expires (auto-delete)
              example:
                id: 550ef2f0-02b6-40b2-bed9-e20816d20255
                expiration_date: '2021-05-23T18:25:43.511Z'
        '400':
          description: Invalid or missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '401':
          description: Invalid or missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
              example:
                message: A subscription already exists for this notification_url
                errors:
                  - 550ef2f0-02b6-40b2-bed9-e20816d20255
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
  /subscriptions/{id}:
    patch:
      security:
        - bearerAuth: []
      tags:
        - Subscriptions
      summary: Refreshes an existing subscription
      description: Refreshes an existing subscription (refresh_subscription)
      operationId: refresh_subscription
      parameters:
        - description: the id of a subscription
          name: id
          in: path
          required: true
          schema:
            type: string
            format: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  expiration_date:
                    type: string
                    format: date-time
                    description: ISO 8601 UTC date/time at which the subscription expires (auto-delete)
              example:
                id: 550ef2f0-02b6-40b2-bed9-e20816d20255
                expiration_date: '2021-06-23T18:25:43.511Z'
        '400':
          description: Invalid or missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '401':
          description: Invalid or missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '404':
          description: The subscription was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '410':
          description: The subscription is expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Subscriptions
      summary: Cancels a subscription
      description: Cancels a previously created subscription (unsubscribe)
      operationId: unsubscribe
      parameters:
        - description: the id of a subscription
          name: id
          in: path
          required: true
          schema:
            type: string
            format: string
      responses:
        '204':
          description: successful operation
        '401':
          description: Invalid or missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '404':
          description: The subscription was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'

components:
  schemas:
    URN:
      type: string
      pattern: "^urn:[a-z][a-z0-9_.\\-]*:[\\w-.]+"
      description: 'Uniform resource name of an object with the syntax `urn:<service_id>:<internal_id>`. <service_id> must be the urn of a valid and active ATLAS service.'
      example: 'urn:animal_data:69d4a4ec-e8a4-4768-a299-14a7a9acd1b1'
    EventCategory:
      type: string
      enum: 
        - BIRTH
        - DEATH
        - ARRIVAL
        - DEPARTURE
        - CALVING
        - MILK_REPORT
    Barn:
      type: object
      description: 
        'This object describes the building where the animals are located. 
        It can be described with optional geo-coordinates.'
      properties:
        urn:
          $ref: '#/components/schemas/URN'
        date_created:
          type: string
          format: date-time
        date_last_updated:
          type: string
          format: date-time
        archived:
          type: boolean
        name:
          type: string
        description:
          type: string
        geo_location:
          $ref: 'https://geojson.org/schema/Point.json'
        geo_layout:
          $ref: 'https://geojson.org/schema/Polygon.json'
      required:
        - urn
        - date_created
        - date_last_updated
        - name
      example:
        urn: 'urn:animal_service:FDBE6F55-6179-4B88-9177-4AFBED33ADAC'
        date_created: '2022-03-14T00:00:00Z'
        date_last_update: '2022-05-04T00:00:42Z'
        archived: false
        name: '1st Barn new'
        description: ''
        geo_location:
          type: 'Point'
          coordinates: [51.0768128, 13.7025469]
        geo_layout:
          type: 'Polygon'
          coordinates:
            [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0]]]

    Pen:
      type: object
      description: 
        'This describes a physical box where the animals are grouped in. 
        This is located in a barn and can have its own geo-coordinates.'
      properties:
        urn:
          $ref: '#/components/schemas/URN'
        date_created:
          type: string
          format: date-time
        date_last_updated:
          type: string
          format: date-time
        archived:
          type: boolean
        name:
          type: string
        description:
          type: string
        barn_urn:
          $ref: '#/components/schemas/URN'
        geo_location:
          $ref: 'https://geojson.org/schema/Point.json'
        geo_layout:
          $ref: 'https://geojson.org/schema/Polygon.json'
      required:
        - urn
        - date_created
        - date_last_updated
        - name
      example:
        urn: 'urn:animal_service:FDBE6F55-6179-4B88-9177-4AFBED33ADAC'
        date_created: '2022-03-14T00:00:00Z'
        date_last_update: '2022-05-04T00:00:42Z'
        archived: false
        name: 'Highyield 1'
        description: '1st Pen new stable left side'
        barn_urn: 'urn:animal_service:FDBE6F55-6179-4B88-9177-4AFBED33ADAC'
    Species:
          type: string
          description: 'Species of animals'
          enum: ['cattle', 'pig', 'chicken']
    Animal:
      type: object
      description: 'Describe one animal at a certain time. 
        Use mandatory `public_identifier` to identify animal 
        across services, add `alternative_identifier` if farmer 
        uses additional farm-specific identifer.
        If `pen_urn` is missing, this animal was not assigned to 
        a pen in that time (e.g. at the pasture).'
      properties:
        urn:
          $ref: '#/components/schemas/URN'
        date_created:
          type: string
          format: date-time
        date_last_updated:
          type: string
          format: date-time
        archived:
          type: boolean
        name:
          type: string
        description:
          type: string
        public_identifier:
          type: string
          description: 'most animals are registered in public-registers, use that e.g. ear-number here'
        alternative_identifier:
          type: string
          description: 'most farms have their own numbering for the cows, use that here'
        pen_urn:
          $ref: '#/components/schemas/URN'
        original_public_identifier:
          type: string
          description: if the animal loose their identity or must otherwise be re-identified, this is the reference to the original identity
        sex:
          type: string
          enum: ['f', 'm']
        breed:
          type: string
          description: 'The breed of the animal, or in the case of cross breed animals, the main breed percentages in the animal s breeding. **todo**: add anim with breeds like ADIS Codeset 2 - C_RASSE'
        species:
          $ref: '#/components/schemas/Species'
      required:
        - urn
        - date_created
        - date_last_updated
        - public_identifier
        - species
      example:
        urn: 'urn:animal_service:FDBE6F55-6179-4B88-9177-4AFBED33ADAC'
        date_created: '2022-03-14T00:00:00Z'
        date_last_update: '2022-05-04T00:00:42Z'
        archived: false
        name: 'Marta'
        public_identifier: 'DE 123456789'
        alternative_identifier: '674'
        pen_urn: 'urn:animal_service:FDBE6F55-6179-4B88-9177-4AFBED33ADAC'
        sex: 'f'
        species: 'cattle'

    Event:
      type: object
      properties:
        date:
          type: string
          format: date-time
          description: Date when this event happened. ISO8601
        category:
          $ref: '#/components/schemas/EventCategory'
        animal_urn:
          $ref: '#/components/schemas/URN'
        payload: 
          oneOf:
            - description: birth event
              type: object
              properties:
                mother_public_identifier:
                  type: string
                father_public_identifier:
                  type: string
            - description: arrival event
              type: object
              properties:
                 arrival_reason:
                  type: string
                  description: reason why this animal arrives on the farm
                  enum:
                    - 'bought'
            - description: departure event
              type: object
              properties:
                 departure_reason:
                  type: string
                  description: reason why this animal departs from the farm.
                  enum:
                    - 'death'
                    - 'sold'
                    - 'slaughered'
            - description: milk-report event
              type: object
              properties:
                milk:
                  type: number
                  description: amount of milk given in kg
                milkFat:
                  type: number
                  description: in %
                milkProtein:
                  type: number
                  description: in %
      example: 
        date: "2023-01-18T08:32:56.809Z"
        category: "BIRTH"
        animal_urn: "urn:animal_data:69d4a4ec-e8a4-4768-a299-14a7a9acd1b1"
        payload:
          mother_public_identifier: "DE12345667"
          father_public_identifier: "DE683920"
    AnimalWeight:
      type: object
      description: one weighing-entry may result out of different weighings over one day and will be calculated out of single weighings.
      required:
        - animal_urn
        - average_weight
        - median_weight
        - date
      properties:
        animal_urn:
          $ref: '#/components/schemas/URN'
        average_weight:
          description: Average value of the weight readings for the animal ont the date specified in kg.
          type: number
        calculated_weight:
          description: This is the projection based on existing data and using Gompertz growth model. In kg.
          type: number
        daily_weight_gain:
          description: Daily gain of weight in kg over the previous two weeks of the specified date.
          type: number
        date:
          type: string
          format: date
          example: '2022-03-14'
          description: 'date of the weighing-intervall, it includes all single measurements of this whole day'
        median_weight:
          description: Median value of the weight readings for the animal ont the date specified in kg.
          type: number
      example: 
        date: "2023-01-20T08:32:56.809Z"
        animal_urn: "urn:animal_data:69d4a4ec-e8a4-4768-a299-14a7a9acd1b1"
        average_weight: 671.1
        calculated_weight: 672.3
        median_weight: 670.0
        daily_weight_gain: 1.02

    Notification:
      description: Payload sent when invoking notification_url
      type: object
      properties:
        subscription_id:
          type: string
          description: the id of a subscription
        date:
          type: string
          format: date-time
          description: ISO 8601 UTC date/time at which the notification was originally triggered (regardless of retries)
        urns:
          type: array
          description: collect all URNs of changed animals at this time
          items: 
            $ref: '#/components/schemas/URN'
    DetailedError:
      type: object
      description: This defines the structure of an error payload when one is present. Actual messages and additional error information content may change from one implementation to another
      properties:
        message:
          type: string
          description: error description
        status:
            type: string
            description: http error code
        error_url:
          type: string
          format: uri
          description: "A service's proprietary UI url where the user may navigate to view additional information or be prompted for additional actions to deal with the error. A well-behaved FMIS will present his users with a visual indication and the means to click on this link when this attribute is present."
        errors:
          type: array
          items:
            type: string
          description: Additional detailed information
      required:
        - message
      example:
        message: this is a sample error message
        errors:
          - this is an example of additional error information
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
